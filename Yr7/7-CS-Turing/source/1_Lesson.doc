<h1 id="startupindent">+STARTUP:indent</h1>
<h1 id="html_head">+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/></h1>
<h1 id="html_head_extra">+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'></h1>
#+HTML_HEAD_EXTRA:
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA:
<script src="js/navbar.js" type="text/javascript"></script>
<h1 id="options-fnil-authornil-num1-creatornil-timestampnil-tocnil-html-stylenil">+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil html-style:nil</h1>
<h1 id="title-touring-turing">+TITLE: Touring Turing</h1>
<h1 id="author-marc-scott">+AUTHOR: Marc Scott</h1>
<h1 id="begin_html">+BEGIN_HTML</h1>
<div class="github-fork-ribbon-wrapper left">
<pre><code>&lt;div class=&quot;github-fork-ribbon&quot;&gt;
  &lt;a href=&quot;https://github.com/MarcScott/7-CS-Turing&quot;&gt;Fork me on GitHub&lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
<div id="stickyribbon">
<pre><code>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;1_Lesson.html&quot;&gt;Week1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;2_Lesson.html&quot;&gt;Week2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;3_Lesson.html&quot;&gt;Week3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;4_Lesson.html&quot;&gt;Week4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;5_Lesson.html&quot;&gt;Week5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;6_Lesson.html&quot;&gt;Week6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;7_Lesson.html&quot;&gt;Week7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;assessment.html&quot;&gt;Assessment&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;</code></pre>
</div>
<h1 id="end_html">+END_HTML</h1>
<ul>
<li>COMMENT Use as a template :PROPERTIES: :HTML_CONTAINER_CLASS: activity :END: ** Learn It :PROPERTIES: :HTML_CONTAINER_CLASS: learn :END:</li>
</ul>
<p>** Research It :PROPERTIES: :HTML_CONTAINER_CLASS: research :END:</p>
<p>** Design It :PROPERTIES: :HTML_CONTAINER_CLASS: design :END:</p>
<p>** Build It :PROPERTIES: :HTML_CONTAINER_CLASS: build :END:</p>
<p>** Test It :PROPERTIES: :HTML_CONTAINER_CLASS: test :END:</p>
<p>** Run It :PROPERTIES: :HTML_CONTAINER_CLASS: run :END:</p>
<p>** Document It :PROPERTIES: :HTML_CONTAINER_CLASS: document :END:</p>
<p>** Code It :PROPERTIES: :HTML_CONTAINER_CLASS: code :END:</p>
<p>** Program It :PROPERTIES: :HTML_CONTAINER_CLASS: program :END:</p>
<p>** Try It :PROPERTIES: :HTML_CONTAINER_CLASS: try :END:</p>
<p>** Badge It :PROPERTIES: :HTML_CONTAINER_CLASS: badge :END:</p>
<p>** Save It :PROPERTIES: :HTML_CONTAINER_CLASS: save :END:</p>
<ul>
<li>Alan Turing :PROPERTIES: :HTML_CONTAINER_CLASS: activity :END: [[http://upload.wikimedia.org/wikipedia/en/c/c8/Alan_Turing_photo.jpg]] ** Learn It :PROPERTIES: :HTML_CONTAINER_CLASS: learn :END:</li>
<li>In 1936, a few years before the outbreak of World War II, Alan Turing invented the <em>Turing Machine</em>.</li>
<li>This was a /hypothetical/ device (not one to be actually built) that could read and change symbols on an infinitely long tape, according to a table of rules.</li>
<li>With this simple idea, Computer Science was born, as the <em>Turing Machine</em> was theoretically capable of performing any calculation that was computable.</li>
<li>It took a few more years before actual computers were constructed, but even today we can talk about computers and programming languages in terms of their =Turing completeness=. This means that they are able to do exactly what a <em>Turing Machine</em> can do.</li>
<li>Python Variables :PROPERTIES: :HTML_CONTAINER_CLASS: activity :END: ** Learn It :PROPERTIES: :HTML_CONTAINER_CLASS: learn :END:</li>
<li>For this project, we'll be using the Python 3 Programming language.</li>
<li>You've used Scratch before, which is a Graphical Programming Language. Python does the same sort of thing, but you program using text instead of blocks.</li>
<li>If you're working on this outside of school, you can download it from the following links.</li>
<li>[[https://www.python.org/ftp/python/3.4.2/python-3.4.2-macosx10.6.pkg][Python 3.4 for Mac]]</li>
<li>[[https://www.python.org/ftp/python/3.4.2/python-3.4.2.amd64.msi][Python 3.4 for Windows]]</li>
<li>If you need Python 3 for Linux - use your package manager =sudo apt-get update &amp;&amp; sudo apt-get install python3 idle3= (on Ubuntu for instance)</li>
<li>If you're working in school, then you should find a program called IDLE, in your programs menu. ** Try It :PROPERTIES: :HTML_CONTAINER_CLASS: try :END:</li>
<li>Open up IDLE. You should be presented with a screen that looks a little like this: [[file:img/IDLE.png]]</li>
<li>IDLE is an Integrated Development Environment (IDE) for Python. This means we can create, edit and run Python files using it.</li>
<li>The screen that popped up is called the =INTERPRETER=. Remember this, and what it looks like.</li>
<li>We can write code in the interpreter, and it gets executed straight away. ** Learn It :PROPERTIES: :HTML_CONTAINER_CLASS: learn :END:</li>
<li>One of Turing's key ideas was an infinitely long tape, upon which symbols could be added, read and changed.</li>
<li>In modern computers this tape is called RAM, and is made up of very complex circuits.</li>
<li>Just like in a Turning machine though, we can add data to RAM, read data from RAM and change data in RAM. ** Code It :PROPERTIES: :HTML_CONTAINER_CLASS: code :END:</li>
<li>Let's write some data to RAM. #+begin_src python myName = 'Alice' #+end_src</li>
<li>You can obviously use your own name.</li>
<li>You have now stored your name in RAM. You have done this using a =variable=</li>
<li>For now think of a =variable= is being made up of an /identifier/ (=myName=) and a /value/ (=Alice=) *** Note - Once you have hit =ENTER= you can not delete what has been executed, any more than you can unbreak an egg. If you make a mistake, just type it out again (or hit =alt= + =p= on your keyboard to bring up the last command again, and alter it from there. ** Try It :PROPERTIES: :HTML_CONTAINER_CLASS: try :END:</li>
<li>Turing's original idea called for an infinitely long tape, that we could store an infinite amount of information on.</li>
<li>RAM is pretty big, even if it's not infinite. A typical Computer might have anywhere between 2Gb and 16Gb or RAM.</li>
<li>This would be enough space to store between 1000000000 and 4000000000 characters, which is enough for us.</li>
<li>Try creating some variables for your friend's names. Each one must have it's own unique /identifier/ though #+begin_src python firstFriendName = 'Robert' secondFriendName = 'Charles' thirdFriendName = 'David' fourthFriendName = 'Eve' #+end_src ** Learn It :PROPERTIES: :HTML_CONTAINER_CLASS: learn :END:</li>
<li>We have to be careful with /identifiers/ for our variables.</li>
<li>Try this and see what happens: #+begin_src python 5thFriendName = 'Faith' #+end_src</li>
<li>You'll get back a message saying you've used =invalid syntax=.</li>
<li>This is known as a syntax error. It means you haven't conformed to the rules of the language.</li>
<li>Here are the rules for Python's Variable Identifiers:</li>
</ul>
<ol style="list-style-type: decimal">
<li>Must not start with a number.</li>
<li>Must not contain symbols like !, @, #, $, % etc.</li>
<li>Must not contain spaces (use =_= or =-= instead)</li>
<li>Are case sensitive (=myname=, =myName=, =MyName= and =MYNAME= would all be different variable identifiers.)</li>
</ol>
<ul>
<li>There's also a few words you should avoid for identifiers, like =not= and =continue=, but you'll learn these as you go along. ** Code It :PROPERTIES: :HTML_CONTAINER_CLASS: code :END:</li>
<li>Now we have some variables stored, we'd best learn how to read them, as that was one of the stipulations of the Turing machine's tape.</li>
<li>You can read the value of a variable just by writing it's name. #+begin_src python myName secondFriendName #+end_src ** Code It :PROPERTIES: :HTML_CONTAINER_CLASS: code :END:</li>
<li>We also needed to be able to change the variables.</li>
<li>Let's have a go at that. #+begin_src python firstFriendName = 'Bob' secondFriendName = 'Charlie' thirdFriendName = 'Dave' #+end_src</li>
<li>Now use the identifiers to read the values and make sure they have changed. ** Badge It - Silver :PROPERTIES: :HTML_CONTAINER_CLASS: badge :END:</li>
<li>Assign variables for all your family. For instance; #+begin_src python mum = 'Alice' dad = 'Bob' cat = 'Eve' #+end_src</li>
<li>Demonstrate that you can display the variable values in your =INTERPRETER=</li>
<li>Python Data Types :PROPERTIES: :HTML_CONTAINER_CLASS: activity :END: ** Badge It - Gold :PROPERTIES: :HTML_CONTAINER_CLASS: badge :END:</li>
<li>Not all variable values are the same.</li>
<li>Copy and paste the following into your interpreter - <em>one line at a time</em> #+begin_src python foo = 10 bar = 3.142 baz = 'Hello World!' qux = True #+end_src</li>
<li>Now, for each of the variables, you can find out it's type using the =type()= inbuilt function. #+begin_src python type(foo) #+end_src</li>
<li>The interpreter will tell you the class of the variable. #+begin_src python <class 'int'> #+end_src</li>
<li>This would tell me that the data-type was an =int=, which is short for /integer/.</li>
<li>Look up each of the data-types for the variables above and then use the web to find out what they each mean (in simple English).</li>
<li>Calculations in Python :PROPERTIES: :HTML_CONTAINER_CLASS: activity :END: ** Try It :PROPERTIES: :HTML_CONTAINER_CLASS: try :END:</li>
<li>We can use Python to perform calculations.</li>
<li>For instance, you can type into your =INTERPRETER= #+begin_src python 6 + 4 #+end_src</li>
<li>In Python we can use =+= and =-= for addition and subtraction, =/= and =*= for division and multiplication.</li>
<li>There are lots of mathematical =operators= we can use. Here is a table of all of them for reference later on.</li>
<li>In the examples below =a = 10= and =b = 20= | Operator | Description | Example | |----------+-------------------------------------------------------+-------------------------------------------------| | =+= | Addition - Adds values on either side of the operator | a + b will give 30 | | =-= | Subtraction | b - a will give 10 | | =<em>= | Multiplication | a </em> b will give 200 | | =/= | Division | b / a will give 2 | | =%= | Modulus - <em>remainder</em> of a division | b % a will give 0 | | =<strong>= | To the power of | a</strong>b will give 10 to the power 20 | | =//= | Division and round down | 9//2 is equal to 4 and 9.0//2.0 is equal to 4.0 |</li>
<li>We can also use brackets, like you would do in maths. #+begin_src python (24+1)*4 #+end_src ** Badge It - Platinum</li>
<li>Use Python to find the answers to the following questions.</li>
</ul>
<ol style="list-style-type: decimal">
<li>1929 x 64</li>
<li>39483 ÷ 321</li>
<li>The remainder when 123 is divided by 2</li>
<li>1234 raised to the power of 4</li>
<li>What is 15% of 50 (remember that % in Python is modulus and not percent)</li>
</ol>
