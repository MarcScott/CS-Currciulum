#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil

#+TITLE: Cryptography
#+AUTHOR: Marc Scott

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/MarcScott/8-CS-Cryptography">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="assessment.html">Assessment</a></li>

    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Cracking the Caesar Cipher
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Last lesson you learned about how _not_ to store passwords, and the problem with the MD5 hashing algorithm.
- It's trivial for a cracker to figure out your password, just by looking up the MD5 hash on Google.
- As most people stupidly use the same password for many sites, the cracker would probably then have their main password.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- One of the best ways of learning how to stop crackers, is to learn how they are able to attack encryption schemes.
- We'll start of by learning how to crack the Caesar Cipher.
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Here's a message that has been encrypted using the Caesar Cipher.
#+BEGIN_SRC
odmhxf dmzqa, ljqruh wkrvh iluvw wzr zrugv wkhb duh mxvw wkhuh wr frqixvh d fudfnhu.
dqbzdb wkh vhfuhw phvvdjh lv, qrergb hashfwv wkh vsdqlvk lqtxlvlwlrq
#+END_SRC
- Can you figure out what the message says? 
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Given enough time, you could probably decrypt the message, but it could take you awhile.
- A computer can do it pretty quickly though.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Let's start with a couple of variables with the information we need.
- Open up a new python file (CC-crack.py) in IDLE and add the following lines of code.
#+BEGIN_SRC python
alphabet = 'abcdefghijklmnopqrstuvwxyz'
cipherText = '''odmhxf dmzqa, ljqruh wkrvh iluvw wzr zrugv wkhb duh mxvw wkhuh wr 
frqixvh d fudfnhu. dqbzdb wkh vhfuhw phvvdjh lv,
qrergb hashfwv wkh vsdqlvk lqtxlvlwlrq'''
#+END_SRC
- In Python, if we want a multiline string, we use three quotes '''
** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:
- The algorithm for this isn't too complicated.
- We're basically going to try all 25 possible shift values on the secret message.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- We've used a =for= loop before to /iterate/ over a string of characters.
#+BEGIN_SRC python
  text = 'the quick brown fox jumped over the lazy dog'
  for letter in text:
      print(letter)
#+END_SRC
- But we can also use for loops to iterate over a range of numbers
#+BEGIN_SRC python
  for i in range(10):
      print(i)

  for i in range(5,20):
      print(i)

  for i in range(10,100,5):
      print(i)

  for i in range(10,0,-1):
      print(i)

  for i in range(10,0,-1):
      print(i)
#+END_SRC

** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Create a new file called forLoops.py
- For each of the =for= loops above, describe what they print out.
- Construct =for= loops to print out the following.
  1. All the numbers from 1 to 1000
  2. All the even numbers from 100 to 200
  3. All the numbers going backwards from 500 to 0 that are divisible by 10
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Put these lines of code into your file.
#+BEGIN_SRC python
  for i in range(1,26):
      plainText = ''
#+END_SRC
- This will give use all the shift values as the variable =i=
- It also creates an empty string, ready to build the decrypted text.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- We now want to iterate over the letters in the cipherText.
- We can do this with another =for= loop.
- Placing one =for= loop inside another =for= loop is called /nesting/
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Change your code so it looks like this.
#+BEGIN_SRC python :results output
  alphabet = 'abcdefghijklmnopqrstuvwxyz'
  cipherText = '''odmhxf dmzqa, ljqruh wkrvh iluvw wzr zrugv wkhb duh mxvw wkhuh wr 
  frqixvh d fudfnhu. dqbzdb wkh vhfuhw phvvdjh lv,
  qrergb hashfwv wkh vsdqlvk lqtxlvlwlrq'''

  for i in range(1,26):
      plainText = ''
      for letter in cipherText:
          position = alphabet.index(letter)
          shiftedIndex = position + i
          shiftedLetter = alphabet[shiftedIndex]
          print(shiftedLetter)
#+END_SRC

- When you run this code, you should get the following error

#+begin_example
Traceback (most recent call last):
  File "/path/to/file/filename.py", line 9, in <module>
    position = alphabet.index(letter)
ValueError: substring not found
#+end_example

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- So what has gone wrong?
- Let's use a trace table to figure it out.
- Trace tables, trace the values of variables in our code 
- The variables i, letter, position and shiftedLetter keep changing as the loop runs.
| i | letter | position | shiftedIndex | shiftedLetter |
|---+--------+----------+--------------+---------------|
| 1 | o      |       14 |           15 | p             |
| 1 | d      |        3 |            4 | e             |
** Badge It - Gold part 1
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Try to complete the trace table
- You should see that there is a problem with the code.
- Identify the problem and write a description of why the program crashes.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- As spaces aren't in our alphabet, we need a way of handling them in our code.
- While we're at it, we might as well handle other characters that are not in the alphabet, such as numbers and punctuation.
- We can use /conditional selection/ to achieve this.
- Create a new Python file to practice conditional selection.
- Let's start off in the /Interpreter/
- Type the following
#+begin_src python
  myVar = 10
  myVar < 10
#+end_src
- You should see the word =False= appear
- Now try the following statements
#+begin_src python
  myVar > 10
  myVar = 10
#+end_src
- We can use the fact that these statements evaluate to =True= or =False= to make decisions in our program.
- Create a new Python file to practice in. You can delete it later.
#+begin_src python
  myVar = 10
  if myVar > 10:
      print('Greater than 10')
  elif myVar < 10:
      print('Less than 10')
  else:
      print('Equal to 10')
#+end_src
- Run this program.
- Conditional statements work by evaluating whether a statement is =True= or =False=
- So in the above example, =myVar <10= evaluates to False.
- Now change the value of myVar and have a look at the results.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- So how does this help us?
- Try typing the following lines into the interpreter.
#+begin_src python
myLetters = 'abcdefg'
'a' in myLetters
'g' in myLetters
' ' in myLetters
'?' in myLetters
#+end_src
- So we can detect if a character is missing from a string of characters and then use conditionals to make different choices.
** Badge It - Gold part 2
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Let's try and use what you have learned to make our program work a little better.
- Use the structured English below to help you build the program in Python.
#+begin_example
1. For i being every number from 1 through to 26...
2. Set plainText to an empty string
3. For every letter in cipherText
4. If the letter is not in alphabet then set shiftedLetter to letter
5. Else set index to letter's position in the alphabet
6. Set shiftIndex to index + i
7. Set shiftedLetter to the letter at shiftIndex in the alphabet
8. Add the shifted Letter to the plainText
9. Print the plainText once the second For loop ends. 
#+end_example
- Run your code again.
- You should get a new error that looks like this.
#+begin_example
Traceback (most recent call last):
  File "/path/to/python/file.py", line 14, in <module>
    shiftedLetter = alphabet[shiftIndex]
IndexError: string index out of range
#+end_example
- If you don't get that error =string index out of range= then keep trying or ask for some help.
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- So what does =string index out of range= mean?
- Let's go back to the /interpreter/ to try and see if we can reproduce the error.
#+begin_src python
myString = 'abcdefg'
myString[3]
myString[7]
#+end_src
- We get the same error. There is no 7th element of the string as we start counting from 0, so the last letter is actually the 6th element.
- We have the same problem in our code.
- As we add =i= to the letters position, eventually we're going to get a number larger than 25, and there are only positions in our alphabet string are 0..25 
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Luckily there is a simple operator that can solve this for us.
- If our program is trying to look up the value of the 26th element in the string, we actually want it to find the 0th element of the string. If it's trying to look up the 29th element of the list, we want it to actually look up the 3rd item.
- The modulo operator finds the /remainder/ after division. In Python we use the =%= symbol.
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- In the interpreter try the following.
#+begin_src python
12 % 26
26 % 26
29 % 26
#+end_src
- Hopefully you can see how this can help us out. If not, then ask your teacher or a peer for a little help.
** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Let's try and finish off our program now.
#+begin_src python
alphabet = 'abcdefghijklmnopqrstuvwxyz'
cipherText = '''odmhxf dmzqa, ljqruh wkrvh iluvw wzr zrugv wkhb duh mxvw wkhuh wr 
frqixvh d fudfnhu. dqbzdb wkh vhfuhw phvvdjh lv,
qrergb hashfwv wkh vsdqlvk lqtxlvlwlrq'''

for i in range(1,26):
    plainText = ''
    for letter in cipherText:
        if
          
        else:
          
          
          
        plainText += shiftedLetter
    print('With a shift of',i,'the message is\n\n',plainText,'\n')
#+end_src
- You need to complete the program by completing the conditional statements.
- When you run the program, you should get 25 attempts at decryption, one of which should make sense.
